// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role userRole
  needPasswordChange Boolean @default(true)
  status userStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin Admin?
  doctor Doctor?
  patient Patient?
  @@map("users")
}
enum userRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum userStatus {
 ACTIVE 
 BLOCKED
 DELETED
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])
  @@map("admin")
}

model Doctor {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  doctor Review[]
  prescripton  Prescription[]
  doctorSchedule DoctorSchedule[]
  appointmet Appointment[]
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])
  doctorSpecialites DoctorSpecilities[]
  @@map("doctor")
}
// how to delete relation data 
model Patient { //delete second
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  prescription Prescription[]
  patientHealthData PatientHealthData? //delete first
  medicalReports MedicalReport[] //delete first
  review Review[]
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appointment  Appointment[]
  user User @relation(fields: [email], references: [email]) //delete last
  @@map("patient")
}


model Specialist {
  id String @id @default(uuid())
  title String
  icon String
  doctorSepecilities DoctorSpecilities[]
  @@map("sepcilities")
}

model DoctorSpecilities {
  specilitiesId String
  specility Specialist @relation(fields: [specilitiesId], references: [id])
  doctroId String
  doctor Doctor @relation(fields: [doctroId], references: [id])
  @@id([specilitiesId, doctroId])
  @@map("doctorSepcilities")
}
model PatientHealthData {
  id String @id @default(uuid())
  patientId            String @unique
  patient  Patient @relation(fields: [patientId], references: [id])
  dateOfBirth          String?
  gender               Gender
  bloodGroup           BloodGroup?
  hasAllergies         Boolean? @default(false)
  hasDiabetes          Boolean? @default(false)
  height               String?
  weight               String?
  smokingStatus        Boolean? @default(false)
  dietaryPreferences   String?
  pregnancyStatus      Boolean? @default(false)
  mentalHealthHistory  String?
  immunizationStatus   String?
  hasPastSurgeries     Boolean? @default(false)
  recentAnxiety        Boolean? @default(false)
  recentDepression     Boolean? @default(false)
  maritalStatus        MaritalStatus?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  @@map("patient_health_data")
}

model MedicalReport{
  id String @id @default(uuid())
  patientId String
  patinet Patient @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  @@map("medical_report")
}

model Schedule {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  doctorSchedule DoctorSchedule[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  appointment Appointment?
  @@map("schedule")
}

model DoctorSchedule {
  doctorId String
  scheduleId String
  isBooked Boolean @default(false)
  doctor Doctor @relation(fields: [doctorId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  appointmentId String? @unique
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  @@id([doctorId, scheduleId])
  @@map("doctor_schedule")
}
model Appointment {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  scheduleId String @unique
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  payment Payment?
  videoCallingId String
  review Review?
  prescription Prescription?
  status AppointmentStatus @default(SCHEDULED)
  paymentStatus PaymentStatus @default(UNPAID)
  doctorSchedule DoctorSchedule?
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@map("appointment")
}

model Payment {
  id String @id @default(uuid())
  appointtmentId String @unique
  appointment Appointment @relation(fields: [appointtmentId], references: [id])
  amount Float
  transactionId String @unique
  status PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@map("payment")
}


model Prescription {
  id String @id @default(uuid())
  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  instructions String
  followUpDate DateTime?
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
    @@map("prescription")
}

model Review {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  doctorId String 
  doctor Doctor @relation(fields: [doctorId], references: [id])
  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  rating Float
  comment String
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@map("review")
}

enum PaymentStatus {
  PAID
  UNPAID
}
enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED 
}
enum Gender {
  MALE
  FEMALE
}
enum MaritalStatus {
  MARRIED
  UNMARRIED
}
enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}